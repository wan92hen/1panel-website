---
// AppStore section for 1Panel website
// Get app store data and implement category switching functionality

import appStoreData from '../1panel.json';

interface App {
  icon: string;
  name: string;
  additionalProperties: {
    description: {
      zh: string;
      en: string;
    };
    shortDescZh: string;
    shortDescEn: string;
    tags: string[];
    key: string;
    recommend?: number;
    type?: string;
  };
}

interface Category {
  key: string;
  name: string;
  apps: App[];
  totalApps: number;
}

let allApps: App[] = [];
let categories: Category[] = [];
let defaultCategory: Category = { key: 'all', name: 'All Apps', apps: [], totalApps: 0 };

try {
  // Extract all apps
  allApps = appStoreData.apps.map((app: any) => ({
    icon: app.icon,
    name: app.name,
    additionalProperties: app.additionalProperties
  }));

  // Extract all categories
  const categoryMap = new Map<string, App[]>();
  
  allApps.forEach(app => {
    if (app.additionalProperties.tags && app.additionalProperties.tags.length > 0) {
      app.additionalProperties.tags.forEach((tag: string) => {
        if (!categoryMap.has(tag)) {
          categoryMap.set(tag, []);
        }
        categoryMap.get(tag)!.push(app);
      });
    }
  });

  // Create category list, maximum 9 apps per category
  categories = Array.from(categoryMap.entries())
    .map(([key, apps]) => {
      // Sort apps by recommend field, keep original order if recommend is 0
      const sortedApps = apps.sort((a, b) => {
        const aRecommend = a.additionalProperties?.recommend || 0;
        const bRecommend = b.additionalProperties?.recommend || 0;
        
        // If both have recommend > 0, sort by recommend (ascending)
        if (aRecommend > 0 && bRecommend > 0) {
          return aRecommend - bRecommend;
        }
        // If only one has recommend > 0, prioritize it
        if (aRecommend > 0 && bRecommend === 0) {
          return -1;
        }
        if (aRecommend === 0 && bRecommend > 0) {
          return 1;
        }
        // If both have recommend === 0, maintain original order
        return 0;
      });
      
      return {
        key,
        name: getCategoryDisplayName(key),
        apps: sortedApps.slice(0, 9),
        totalApps: apps.length
      };
    })
    .filter(category => category.apps.length > 0)
    .sort((a, b) => b.totalApps - a.totalApps);

  // Add "All Apps" category with sorted apps
  const sortedAllApps = allApps.sort((a, b) => {
    const aRecommend = a.additionalProperties?.recommend || 0;
    const bRecommend = b.additionalProperties?.recommend || 0;
    
    // If both have recommend > 0, sort by recommend (ascending)
    if (aRecommend > 0 && bRecommend > 0) {
      return aRecommend - bRecommend;
    }
    // If only one has recommend > 0, prioritize it
    if (aRecommend > 0 && bRecommend === 0) {
      return -1;
    }
    if (aRecommend === 0 && bRecommend > 0) {
      return 1;
    }
    // If both have recommend === 0, maintain original order
    return 0;
  });
  
  defaultCategory.apps = sortedAllApps.slice(0, 9);
  defaultCategory.totalApps = allApps.length;
  categories.unshift(defaultCategory);

} catch (error) {
  console.error('Failed to load app data:', error);
}

// Get category display name
function getCategoryDisplayName(key: string): string {
  const categoryNames: Record<string, string> = {
    'Database': 'Database',
    'Website': 'Website',
    'DevOps': 'DevOps',
    'Security': 'Security',
    'Media': 'Media',
    'Tool': 'Tools',
    'Development': 'Development',
    'Monitoring': 'Monitoring',
    'Storage': 'Storage',
    'Network': 'Network'
  };
  return categoryNames[key] || key;
}

// Get app icon
function getAppIcon(app: App): string {
  return app.icon || './images/default-app-icon.png';
}

// Format download count
function formatDownloads(downloads: number): string {
  if (downloads >= 1000000) {
    return (downloads / 1000000).toFixed(1) + 'M';
  } else if (downloads >= 1000) {
    return (downloads / 1000).toFixed(1) + 'K';
  }
  return downloads.toString();
}
---

<section id="appstore" class="section-padding bg-gray-50">
  <div class="container-custom">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="fade-in-up text-4xl lg:text-5xl font-bold text-gray-800 mb-6">
        Rich
        <span class="text-1panel-gradient">App Store</span>
      </h2>
      <p class="fade-in-up text-xl text-gray-600 max-w-3xl mx-auto mb-8" style="animation-delay: 0.2s;">
        Curated high-quality open source applications with one-click installation and deployment to meet diverse business needs
      </p>
      
      <!-- Category Tabs -->
      {categories.length > 1 && (
        <div class="fade-in-up flex flex-wrap justify-center gap-2 mb-8" style="animation-delay: 0.4s;">
          {categories.map((category: Category, index: number) => (
            <button 
              class={`category-tab px-6 py-3 rounded-xl font-medium transition-all duration-300 ${
                index === 0 ? 'active' : ''
              }`}
              data-category={category.key}
            >
              {category.name}
              <span class="ml-2 text-xs opacity-75">({category.totalApps})</span>
            </button>
          ))}
        </div>
      )}
    </div>

    <!-- Apps Container -->
    <div id="apps-container">
      {categories.map((category: Category, categoryIndex: number) => (
        <div 
          class={`category-content ${categoryIndex === 0 ? 'active' : 'hidden'}`}
          data-category={category.key}
        >
          <!-- Apps Grid -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {category.apps.map((app: App, index: number) => (
              <div class="fade-in-up card group hover:scale-105" style={`animation-delay: ${index * 0.05}s;`}>
                <div class="flex items-start space-x-4">
                  <!-- App Icon -->
                  <div class="flex-shrink-0">
                    <img 
                      src={getAppIcon(app)} 
                      alt={app.name}
                      class="w-16 h-16 rounded-xl object-cover group-hover:scale-110 transition-transform duration-300"
                      loading="lazy"
                      onerror="this.src='./images/default-app-icon.png'"
                    />
                  </div>
                  
                  <!-- App Info -->
                  <div class="flex-1 min-w-0">
                    <div class="flex items-start justify-between mb-2">
                      <h3 class="text-lg font-semibold text-gray-800 truncate pr-2">{app.name}</h3>
                    </div>
                    
                    <p class="text-sm text-gray-600 mb-3 line-clamp-2">
                      {app.additionalProperties?.description?.en || app.additionalProperties?.shortDescEn || 'No description available'}
                    </p>
                    
                    <!-- Tags -->
                    {app.additionalProperties?.tags && app.additionalProperties.tags.length > 0 && (
                      <div class="flex flex-wrap gap-1 mb-3">
                        {app.additionalProperties.tags.slice(0, 2).map((tag: string) => (
                          <span class="inline-block px-2 py-1 text-xs rounded-md bg-1panel/10 text-1panel border border-1panel/20">
                            {getCategoryDisplayName(tag)}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <!-- Category Stats and View All Button -->
          <div class="text-center mt-8">
            <p class="text-sm text-gray-500 mb-4">
              {category.name} • {category.totalApps} apps total
              {category.key !== 'all' && ` • Sorted by recommendation`}
            </p>
            
            <!-- View All Button -->
            <a 
              href="https://demo.1panel.pro/apps/all" 
              target="_blank" 
              class="inline-flex items-center px-6 py-3 bg-white border border-gray-300 text-gray-700 rounded-lg font-medium transition-all duration-300 hover:border-gray-400 hover:bg-gray-50 shadow-sm hover:shadow-md group"
            >
              <span>View All Apps on Demo</span>
              <svg class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
            </a>
          </div>
        </div>
      ))}
    </div>

    <!-- No Apps Message -->
    {categories.length === 0 && (
      <div class="text-center py-16">
        <div class="w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-800 mb-2">No App Data Available</h3>
        <p class="text-gray-500">App store data is loading, please try again later</p>
      </div>
    )}
  </div>
</section>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .category-tab {
    background: rgba(229, 231, 235, 0.8);
    color: #6b7280;
    border: 1px solid rgba(209, 213, 219, 0.5);
  }
  
  .category-tab:hover {
    background: rgba(0, 94, 235, 0.1);
    color: #005eeb;
    border-color: rgba(0, 94, 235, 0.3);
    transform: translateY(-2px);
  }
  
  .category-tab.active {
    background: linear-gradient(135deg, #005eeb 0%, #0066ff 100%);
    color: white;
    border-color: #005eeb;
    transform: translateY(-2px);
    box-shadow: 0 10px 25px -3px rgba(0, 94, 235, 0.3);
  }
  
  .category-content {
    transition: all 0.3s ease-in-out;
  }
  
  .category-content.hidden {
    display: none;
  }
  
  .category-content.active {
    display: block;
    animation: fadeInUp 0.5s ease-out;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Category switching functionality
  document.addEventListener('DOMContentLoaded', function() {
    const categoryTabs = document.querySelectorAll('.category-tab');
    const categoryContents = document.querySelectorAll('.category-content');
    
    categoryTabs.forEach(tab => {
      tab.addEventListener('click', (event) => {
        const target = event.currentTarget as HTMLElement;
        const targetCategory = target.getAttribute('data-category');
        
        // Remove all active states
        categoryTabs.forEach(t => t.classList.remove('active'));
        categoryContents.forEach(c => {
          c.classList.remove('active');
          c.classList.add('hidden');
        });
        
        // Add current selected state
        target.classList.add('active');
        const targetContent = document.querySelector(`[data-category="${targetCategory}"].category-content`);
        if (targetContent) {
          targetContent.classList.remove('hidden');
          targetContent.classList.add('active');
        }
      });
    });
  });
</script> 