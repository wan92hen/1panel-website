---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "1Panel - 现代化、开源的Linux服务器运维管理面板" } = Astro.props;
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <meta name="description" content={description} />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/svg+xml" href="./favicon.png" />
  <meta name="generator" content={Astro.generator} />
  
  <!-- SEO Meta Tags -->
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:type" content="website" />
  <meta property="og:image" content="./images/overview-full.png" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={description} />
  
  <!-- Keywords -->
  <meta name="keywords" content="1Panel,Linux,服务器管理,开源,运维,面板,Docker,容器管理,网站建设,数据库管理" />
  
  <title>{title}</title>
  
  <!-- Preload critical fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" is:inline href="./lib/asciinema-player.css">
  <script is:inline src="./lib/asciinema-player.min.js"></script>
  <slot name="head" />
</head>
<body class="bg-dark-900 text-gray-100 antialiased">
  <!-- Background particles -->
  <div id="particles-background" class="fixed inset-0 z-0"></div>
  
  <!-- Main content -->
  <div class="relative z-10">
    <slot name="main" />
  </div>
  
  <!-- Global scripts -->
  <script>
    // 获取下载量并在获取后再执行动画
    async function fetchDownloadCountAndAnimate() {
      let downloadCount = 1567210; // 默认值
      try {
        const response = await fetch(
          "https://community.fit2cloud.com/installation-statistics?product=OnePanel&dateRange=AllTime"
        );
        const count = await response.text();
        downloadCount = parseInt(count) || 1567210;
      } catch (error) {
        console.error("Failed to fetch download count:", error);
      }

      // 更新页面上显示的下载量（假设有 id="download-count" 的元素）
      const el = document.getElementById("download-count");
      if (el) {
        el.dataset.target = `${downloadCount}`;
        // 立即显示初始值
        el.textContent = Number(downloadCount).toLocaleString();
      }

      // 现在再执行动画
      setupAnimations();
      animateCounters();
    }

    // Intersection Observer for animations
    function setupAnimations() {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate');
          }
        });
      }, observerOptions);

      // Observe all elements with animation classes
      document.querySelectorAll('.fade-in-up, .fade-in-left, .fade-in-right').forEach(el => {
        observer.observe(el);
      });
    }

    // Number counter animation
    function animateCounters() {
      const counters = document.querySelectorAll('.counter');
      const observerOptions = {
        threshold: 0.5
      };

      const counterObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const counter = entry.target;
            // 兼容 null
            const dataTarget = counter.getAttribute('data-target');
            const target = dataTarget ? parseInt(dataTarget) : 0;
            const duration = 2000; // 2 seconds
            const step = target / (duration / 16); // 60fps
            let current = 0;

            const updateCounter = () => {
              if (current < target) {
                current += step;
                if (current > target) current = target;
                counter.textContent = Math.floor(current).toLocaleString();
                requestAnimationFrame(updateCounter);
              }
            };

            updateCounter();
            counterObserver.unobserve(counter);
          }
        });
      }, observerOptions);

      counters.forEach(counter => {
        counterObserver.observe(counter);
      });
    }

    // Particle background
    function createParticles() {
      const container = document.getElementById('particles-background');
      if (!container) return;

      const particleCount = 50;
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'absolute w-1 h-1 bg-blue-500 rounded-full opacity-20 particles';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.top = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 8 + 's';
        particle.style.animationDuration = (Math.random() * 3 + 5) + 's';
        container.appendChild(particle);
      }
    }

    // Smooth scroll for anchor links
    function setupSmoothScroll() {
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          // @ts-ignore
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
    }

    // Typing effect for code blocks
    function typeText(element, text, speed = 50) {
      let i = 0;
      element.innerHTML = '';
      const timer = setInterval(() => {
        if (i < text.length) {
          element.innerHTML += text.charAt(i);
          i++;
        } else {
          clearInterval(timer);
        }
      }, speed);
    }

    // Start typing effect when element is visible
    function setupTypingEffect() {
      const typingElements = document.querySelectorAll('.typing-effect');
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const element = entry.target;
            const text = element.getAttribute('data-text');
            if (text) {
              typeText(element, text);
              observer.unobserve(element);
            }
          }
        });
      }, { threshold: 0.5 });

      typingElements.forEach(el => observer.observe(el));
    }

    // 初始化
    document.addEventListener('DOMContentLoaded', () => {
      fetchDownloadCountAndAnimate();
      createParticles();
      setupSmoothScroll();
      setupTypingEffect();
    });
  </script>
</body>
</html>
